{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","newTitle","trim","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","onBlur","getNewTitle","autoFocus","onDoubleClick","Todolist","tasks","map","t","id","isDone","type","newIsDoneValue","checked","changeTaskStatus","changeTaskTitle","removeTask","changeTodoListTitle","removeTodolist","addTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","changeStatus","find","taskID","todolist","tl","todoListID","todoList","newTodoListID","newTodoList","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8bbd3253.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n        // if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            props.addItem(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    getNewTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        // debugger\r\n        if (title.trim()) {\r\n            props.getNewTitle(title.trim());\r\n        }\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus={true}\r\n                onChange={onChangeHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.value}</span>\r\n    );\r\n};\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskID: string, title: string, todolistId: string) => void\r\n    changeTodoListTitle: (todoListID: string, title: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n\r\n// let [title, setTitle] = useState(\"\")\r\n// let [error, setError] = useState<string | null>(null)\r\n\r\n// const addTask = () => {\r\n//     let newTitle = title.trim();\r\n//     if (newTitle !== \"\") {\r\n//         props.addTask(newTitle, props.id);\r\n//         setTitle(\"\");\r\n//     } else {\r\n//         setError(\"Title is required\");\r\n//     }\r\n// }\r\n\r\n// const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     setTitle(e.currentTarget.value)\r\n// }\r\n//\r\n// const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//     setError(null);\r\n//     if (e.charCode === 13) {\r\n//         addTask();\r\n//     }\r\n// }\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n    const tasks = props.tasks.map(t => {\r\n        const onClickHandler = () => props.removeTask(t.id, props.id)\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n        }\r\n\r\n        const changeTaskTitle = (title: string) => {\r\n            props.changeTaskTitle(t.id, title, props.id)\r\n        }\r\n\r\n\r\n        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n            <input\r\n                type=\"checkbox\"\r\n                onChange={onChangeHandler}\r\n                checked={t.isDone}\r\n            />\r\n            {/*<span>{t.title}</span>*/}\r\n            <EditableSpan value={t.title} getNewTitle={changeTaskTitle}/>\r\n            <button onClick={onClickHandler}>x</button>\r\n        </li>\r\n    })\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={props.title} getNewTitle={changeTodoListTitle}/>\r\n            <button onClick={removeTodolist}>x</button>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        {/*<div>*/}\r\n        {/*    <input value={title}*/}\r\n        {/*           onChange={onChangeHandler}*/}\r\n        {/*           onKeyPress={onKeyPressHandler}*/}\r\n        {/*           className={error ? \"error\" : \"\"}*/}\r\n        {/*    />*/}\r\n        {/*    <button onClick={addTask}>+</button>*/}\r\n        {/*    {error && <div className=\"error-message\">{error}</div>}*/}\r\n        {/*</div>*/}\r\n        <ul>\r\n            {tasks}\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from \"./AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, title: string, todolistId: string) {\r\n        const todolistTasks = tasks[todolistId];\r\n        const task = todolistTasks.find(t => t.id === taskID );\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = title;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1();\r\n        const newTodoList: TodolistType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: 'all'\r\n        }\r\n        setTodolists([...todolists, newTodoList])\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodoListID]: []\r\n        })\r\n    }\r\n\r\n    function changeTodoListTitle(todoListID: string, title: string) {\r\n        const todoList = todolists.find( tl => tl.id === todoListID)\r\n        if(todoList){\r\n            todoList.title = title\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}